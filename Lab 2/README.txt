Zuokun Yu

zy2170

Lab 2


Part 1/2 both work as specififed in the lab.

For part1, I used qsort() and wrote a comparison function. For the numbers
 generated by random(), I took mod 100 to easier to read.

For part2, it's all standard implementation.



Valgrind below! ^_^ or I guess v_v

==19358== Memcheck, a memory error detector
==19358== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==19358== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==19358== Command: ./isort
==19358== 
Please input a positive number: 
Random Array: 54, 81, 3, 40, 82, 4, 86, 97, 68, 17, 39, 60, 98, 39, 14, 9, 72, 97, 37, 13
Ascending Array: 3, 4, 9, 13, 14, 17, 37, 39, 39, 40, 54, 60, 68, 72, 81, 82, 86, 97, 97, 98
Descending Array: 98, 97, 97, 86, 82, 81, 72, 68, 60, 54, 40, 39, 39, 37, 17, 14, 13, 9, 4, 3
==19358== 
==19358== HEAP SUMMARY:
==19358==     in use at exit: 0 bytes in 0 blocks
==19358==   total heap usage: 3 allocs, 3 frees, 240 bytes allocated
==19358== 
==19358== All heap blocks were freed -- no leaks are possible
==19358== 
==19358== For counts of detected and suppressed errors, rerun with: -v
==19358== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)
==19421== Memcheck, a memory error detector
==19421== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==19421== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==19421== Command: ./twecho lol haha yay
==19421== 
lol LOL
haha HAHA
yay YAY
==19421== 
==19421== HEAP SUMMARY:
==19421==     in use at exit: 0 bytes in 0 blocks
==19421==   total heap usage: 6 allocs, 6 frees, 78 bytes allocated
==19421== 
==19421== All heap blocks were freed -- no leaks are possible
==19421== 
==19421== For counts of detected and suppressed errors, rerun with: -v
==19421== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)


Part 1: User inputs a number n, the size of the array to be created. 

An array of size n is created and is initalized with random values between 0 and 20

Output is
1)Random array
2)Sorted ascending array
3)Sorted descending array

Part 2: Takes any number of command line arguments and prints them in their
1)Original form
2)All uppercase

